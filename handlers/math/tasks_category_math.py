"""
–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Ç–æ–º —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –Ω–∞–∂–º–µ—Ç "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" –∏–ª–∏ "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ".

–°–Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(—Ñ—É–Ω–∫—Ü–∏—è: tasks_category_math_start), –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥—Ä–∏—é(—Ñ—É–Ω–∫—Ü–∏—è: one_tasks_category), –µ—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É –ø—Ä–∏—Å—ã–ª–µ—Ç—Å—è –∑–∞–¥–∞—á–∞.

–û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º:
    1) –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –§—É–Ω–∫—Ü–∏—è: tasks_category_math_start
    2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å
    —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é. –§—É–Ω–∫—Ü–∏—è: one_tasks_category
    3) –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞. –§—É–Ω–∫—Ü–∏—è: tasks_category_math_print_keyboard_inline
    4) –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" –∏–ª–∏ "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è: tasks_category_math_print_keyboard_default
    5) –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–ø–∏—Å–∞—Ç—å "üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É"

"""

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import emoji
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.markdown import hlink

from data_b.dp_control import problem_category_random, finding_categories_table, finding_one_categories_table, \
    finding_main_categories_table, action_add
from handlers.keyboards.default import math_menu
from handlers.keyboards.inline import math_menu_inline
from handlers.math.math import MathButCategory

callback_problems_math = CallbackData("problems", "category")
callback_problems_info_math = CallbackData("values", "info")
callback_main_problems_math = CallbackData("problems", "category")


async def tasks_category_math_start(message: types.Message, state: FSMContext):
    await state.update_data(correct=[])
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π:',
                         reply_markup=math_menu_inline.get_inline_main_math_problems_category())
    link_endrey = hlink('–≤ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º', 'https://t.me/Endrey_k')
    await message.answer(f'<u>–ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è, —Ç–æ –ø—Ä–æ—à—É –Ω–∞–ø–∏—Å–∞—Ç—å {link_endrey}</u>'
                         ' —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:\n'
                         '(–∫–∞—Ç–µ–≥–æ—Ä–∏—è) - (id –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ) - (–∏ —á–∞—Å—Ç—å —É—Å–ª–æ–≤–∏—è)\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 35793 - –î–∞–Ω —Ç–µ—Ç—Ä–∞—ç–¥—Ä, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏...',
                         disable_web_page_preview=True)


async def one_tasks_category(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    categories = finding_one_categories_table(call["data"][9:])
    if len(categories) == 1:
        global category
        category = callback_data["category"]
        # –ë–µ—Ä—ë—Ç –∏–∑ –±–¥ —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –°–õ–û–í–ê–†–ï
        dictionary_info_problem = problem_category_random(category, 'math')

        title = dictionary_info_problem['title']
        href = dictionary_info_problem['href']
        subcategory = dictionary_info_problem['subcategory']
        complexity, classes = dictionary_info_problem['complexity'], dictionary_info_problem['classes']
        condition = dictionary_info_problem['conditions']

        await state.update_data(card_id=href)

        # –û–±—Ä–∞–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
        info_problem = dict(list(dictionary_info_problem.items())[6:])

        global problems_info_data_math
        problems_info_data_math = info_problem
        try:
            link_problems = hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É', href)
            dop_info = f'\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}\n–ö–ª–∞—Å—Å—ã: {classes}'
            await call.message.answer(
                f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –µ–≥–æ ID: {title}\n{link_problems}{dop_info}',
                reply_markup=math_menu.get_keyboard_math_category())
            await call.message.answer(f'{condition}',
                                      reply_markup=math_menu_inline.get_inline_math_problems_category_info(
                                          info_problem))

            await call.answer()
            await MathCategory.math_step.set()

        except Exception:
            await call.message.answer('–°–ª–æ–º–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞')
    else:
        await call.answer()
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π:',
                                  reply_markup=math_menu_inline.get_inline_one_main_math_problems_category(
                                      callback_data["category"]))


async def tasks_category_math_print_keyboard_inline(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    global category
    category = callback_data["category"]
    # –ë–µ—Ä—ë—Ç –∏–∑ –±–¥ —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –°–õ–û–í–ê–†–ï
    dictionary_info_problem = problem_category_random(category, 'math')

    title = dictionary_info_problem['title']
    href = dictionary_info_problem['href']
    subcategory = dictionary_info_problem['subcategory']
    complexity, classes = dictionary_info_problem['complexity'], dictionary_info_problem['classes']
    condition = dictionary_info_problem['conditions']

    # dict(list(dictionary_info_problem.items())) - –°–ª–æ–≤–∞—Ä—å —Å–æ–∂–µ—Ä–∂–∞—â–∏–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    # dict(list(dictionary_info_problem.items())[6:]) - —Å–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è —Ä–µ—à–µ–Ω–∏—è–º–∏, –æ—Ç–≤–µ—Ç–æ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    info_problem = dict(list(dictionary_info_problem.items())[6:])

    global problems_info_data_math
    problems_info_data_math = info_problem

    try:
        link_problems = hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É', href)
        dop_info = f'\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}\n–ö–ª–∞—Å—Å—ã: {classes}'
        await call.message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –µ–≥–æ ID: {title}\n{link_problems}{dop_info}',
            reply_markup=math_menu.get_keyboard_math_category())
        await call.message.answer(f'{condition}',
                                  reply_markup=math_menu_inline.get_inline_math_problems_category_info(info_problem))

        await call.answer()
        await MathCategory.math_step.set()

    except Exception:
        await call.message.answer('–°–ª–æ–º–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞')


async def tasks_category_math_print_keyboard_default(message: types.Message, state: FSMContext):
    dictionary_info_problem = problem_category_random(category, 'math')

    title = dictionary_info_problem['title']
    href = dictionary_info_problem['href']
    subcategory = dictionary_info_problem['subcategory']
    complexity, classes = dictionary_info_problem['complexity'], dictionary_info_problem['classes']
    condition = dictionary_info_problem['conditions']

    # dict(list(dictionary_info_problem.items())) - –°–ª–æ–≤–∞—Ä—å —Å–æ–∂–µ—Ä–∂–∞—â–∏–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    # dict(list(dictionary_info_problem.items())[6:]) - —Å–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è —Ä–µ—à–µ–Ω–∏—è–º–∏, –æ—Ç–≤–µ—Ç–æ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    info_problem = dict(list(dictionary_info_problem.items())[6:])

    global problems_info_data_math
    problems_info_data_math = info_problem

    try:
        # –µ—Å–ª–∏ "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", —Ç–æ –≤ user_data['correct'] –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è id –∫–∞—Ä—Ç–æ—á–∫–∏
        if message.text == emoji.emojize(":white_check_mark:") + ' –ü—Ä–∞–≤–∏–ª—å–Ω–æ':
            user_data = await state.get_data()
            correct = user_data['correct']
            correct.append(href)
            await state.update_data(correct=correct)

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ action cat_math –≤ –±–¥
            action_add(message.from_user.id, 'cat_math', True)
        else:
            action_add(message.from_user.id, 'cat_math', False)

        link_problems = hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É', href)
        dop_info = f'\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}\n–ö–ª–∞—Å—Å—ã: {classes}'
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –µ–≥–æ ID: {title}\n{link_problems}{dop_info}',
            reply_markup=math_menu.get_keyboard_math_category())
        await message.answer(f'{condition}',
                             reply_markup=math_menu_inline.get_inline_math_problems_category_info(info_problem))
        await MathCategory.math_step.set()

    except Exception:
        await message.answer('–°–ª–æ–º–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞')


async def tasks_category_math_print_info(call: types.CallbackQuery, callback_data: dict):
    """
    –í–û–¢ –¢–£–¢ –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–õ–Ø–¢–¨, –¢.–ö –¢–£–¢ –ù–ï–ü–û–ù–Ø–¢–ù–û –ó–ê–ß–ï–ú –ù–£–ñ–ï–ù TRANSLATE, –ï–°–õ–ò –ï–°–¢–¨ info_math
    """

    info = callback_data['info']
    try:
        if info == 'Decision 1':
            await call.message.answer(f'{problems_info_data_math["decisions_1"]}')

        elif info == 'Decision 2':
            await call.message.answer(f'{problems_info_data_math["decisions_2"]}')

        elif info == 'Answer':
            await call.message.answer(f'{problems_info_data_math["answer"]}')

        elif info == 'Remarks':
            await call.message.answer(f'{problems_info_data_math["remarks"]}')

    except Exception:
        await call.message.answer(f'–û—Ç–≤–µ—Ç –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è')

    await call.answer()


async def tasks_category_math_end(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    # –°–ø–∏—Å–æ–∫ correct —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏(–≤ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ –µ—Å—Ç—å id –∑–∞–¥–∞—á–∏)
    correct = user_data['correct']
    await state.finish()
    string_correct = ''
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for i in range(len(correct)):
        link_problems = hlink('–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É', correct[i])
        string_correct += f"{i + 1}: id - {correct[i][52:]} ({link_problems})\n"

    await message.answer(
        emoji.emojize(
            ":bar_chart:") + f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(correct)}\n{string_correct}",
        disable_web_page_preview=True)

    await message.answer(emoji.emojize(":red_circle: ") + ' –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å',
                         reply_markup=types.ReplyKeyboardRemove())


class MathCategory(StatesGroup):
    """–î–∞–Ω–Ω—ã–µ state –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–æ–Ω—á–∏—Ç—å' –∏ '–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞'"""
    math_step = State()
    math_choose = State()


def register_handlers_tasks_math_category(dp: Dispatcher):
    dp.register_message_handler(tasks_category_math_start,
                                Text(equals=emoji.emojize(":book:") + ' –ó–∞–¥–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'),
                                state=MathButCategory.math_category_step)

    all_main_files_names = [i[0] for i in finding_main_categories_table('math')]
    dp.register_callback_query_handler(one_tasks_category,
                                       callback_main_problems_math.filter(category=all_main_files_names), state='*')

    all_files_names = [i[0] for i in finding_categories_table('math')]
    dp.register_callback_query_handler(tasks_category_math_print_keyboard_inline,
                                       callback_problems_math.filter(category=all_files_names), state='*')

    choose = [emoji.emojize(":white_check_mark:") + ' –ü—Ä–∞–≤–∏–ª—å–Ω–æ', emoji.emojize(":x:") + ' –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ']
    dp.register_message_handler(tasks_category_math_print_keyboard_default,
                                Text(choose),
                                state=MathCategory.math_step)
    dp.register_message_handler(tasks_category_math_end,
                                Text(equals=emoji.emojize(":stop_sign:") + ' –ó–∞–∫–æ–Ω—á–∏—Ç—å'),
                                state=MathCategory.math_step)

    info = ['Decision 1', 'Decision 2', 'Answer', 'Remarks']
    dp.register_callback_query_handler(tasks_category_math_print_info,
                                       callback_problems_info_math.filter(info=info), state='*')
